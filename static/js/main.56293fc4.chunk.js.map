{"version":3,"sources":["component/MigrationFlow/MigrationFlow.tsx","component/SankeyNivel/SankeyNivel.tsx","component/Destinos/Destinos.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MigrationFlow","id","CircularMigrationPlot","data","chart","element","width","margin","mylayout","threshold","labelThreshold","timeline","Component","props","animationRef","React","createRef","ref","this","Runtime","module","notebook","name","Inspector","current","Destinos","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6XAKqBA,G,uLAEjB,OAAO,yBAAKC,GAAG,kBACX,yBAAKA,GAAG,aACR,yBAAKA,GAAG,a,0CAKZC,IAAsB,CACpBC,KAAM,+BACNC,MAAO,CACHC,QAAS,SACTC,MAAO,KACPC,OAAQ,IACRC,SAAU,CACNC,UAAW,EACXC,eAAgB,IAGxBC,SAAU,kB,GApB2BC,c,gBCEtBZ,G,kBAGnB,WAAYa,GAAa,IAAD,8BACtB,4CAAMA,KAHRC,kBAEwB,EAEtB,EAAKA,aAAeC,IAAMC,YAFJ,E,sEAMtB,OACE,yBAAKC,IAAKC,KAAKJ,aAAqBb,GAAG,a,0CAItB,IAAD,QACF,IAAIkB,KAEZC,OAAOC,KAAU,SAACC,GACxB,GAAa,UAATA,EACF,OAAO,IAAIC,IAAU,EAAKT,aAAaU,gB,GAnBJZ,c,QCCtBa,G,kBAGnB,WAAYZ,GAAa,IAAD,8BACtB,4CAAMA,KAHRC,kBAEwB,EAEtB,EAAKA,aAAeC,IAAMC,YAFJ,E,sEAMtB,OACE,yBAAKC,IAAKC,KAAKJ,aAAqBb,GAAG,e,0CAItB,IAAD,QACF,IAAIkB,KAEZC,OAAOC,KAAU,SAACC,GACxB,GAAa,UAATA,EACF,OAAO,IAAIC,IAAU,EAAKT,aAAaU,gB,GAnBTZ,c,sBC+HvBc,EA1HO,WACpB,OACE,yBAAKC,UAAU,OACb,4BAAQ1B,GAAG,eACT,yBAAKA,GAAG,SACR,2DACA,4GAEA,mEACA,8DAIF,6BAAS0B,UAAU,WACjB,wCAEA,uFACA,yBAAK1B,GAAG,iBACN,yBAAK0B,UAAU,sBACb,6BAAK,kBAAC,IAAD,CAAeA,UAAU,UADhC,UAIA,yBAAKA,UAAU,4BACb,kBAAC,IAAD,CAAqBA,UAAU,UAEjC,yBAAKA,UAAU,sBACb,6BAAK,kBAAC,IAAD,CAAeA,UAAU,UADhC,YAMF,4BACE,kEACA,sDACA,mFACA,wCA6BJ,6BAASA,UAAU,WACjB,sEACA,+GACA,kBAAC,EAAD,MAEA,6BACE,4BACE,8FACA,mGAIJ,kBAAC,EAAD,OAGF,iCACE,iDADF,iDAqBA,iCACE,sDACA,kBAAC,EAAD,OAGF,iCACE,2FASF,iCACE,4CCrHYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.56293fc4.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport CircularMigrationPlot from 'circular-migration-plot/dist/circular-migration-plot';\nimport './migration-flow.scss'\n\nexport default class MigrationFlow extends Component {\n  render() {\n    return <div id=\"migration-flow\">\n        <div id=\"timeline\"></div>\n        <div id=\"chart\"></div>\n      </div>;\n  }\n\n  componentDidMount() {\n    CircularMigrationPlot({\n      data: 'data/circular_flow_plot.json',\n      chart: {\n          element: '#chart',\n          width: 1500,\n          margin: 100,\n          mylayout: {\n              threshold: 1,\n              labelThreshold: 1\n          }\n      },\n      timeline: '#timeline',\n    });\n  }\n}\n","import React, { Component } from 'react';\n\nimport {Runtime, Inspector} from \"@observablehq/runtime\";\nimport notebook from \"d81b595ec1662ba7\";\n\nimport './sankey-nivel.css'\n\nexport default class MigrationFlow extends Component {\n  animationRef: React.RefObject<unknown>;\n\n  constructor(props: any) {\n    super(props);\n    this.animationRef = React.createRef();\n  }\n\n  render() {\n    return (\n      <div ref={this.animationRef as any} id=\"sankey\"></div>\n    );\n  }\n\n  componentDidMount() {\n    const runtime = new Runtime();\n\n    runtime.module(notebook, (name: any) => {\n      if (name === \"chart\") {\n        return new Inspector(this.animationRef.current);\n      }\n    });\n  }\n}\n\n","import React, { Component } from 'react';\n\nimport {Runtime, Inspector} from \"@observablehq/runtime\";\nimport notebook from \"4022e6f4b2f2dd74\";\n\nimport './destinos.css'\n\n\nexport default class Destinos extends Component {\n  animationRef: React.RefObject<unknown>;\n\n  constructor(props: any) {\n    super(props);\n    this.animationRef = React.createRef();\n  }\n\n  render() {\n    return (\n      <div ref={this.animationRef as any} id=\"destinos\"></div>\n    );\n  }\n\n  componentDidMount() {\n    const runtime = new Runtime();\n\n    runtime.module(notebook, (name: any) => {\n      if (name === \"chart\") {\n        return new Inspector(this.animationRef.current);\n      }\n    });\n  }\n}\n\n","import React from 'react';\n\nimport 'normalize.css';\nimport MigrationFlow from './component/MigrationFlow/MigrationFlow';\nimport SankeyNivel from './component/SankeyNivel/SankeyNivel';\nimport Destinos from './component/Destinos/Destinos';\n\nimport './declarations.d.ts';\nimport MapaUFC from './component/MapaUFC/MapaUFC';\n\nimport './App.scss';\nimport { AiOutlineUser, AiOutlineArrowRight } from 'react-icons/ai'\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header id=\"pag-inicial\">\n        <div id=\"front\">\n        <h1>O bom filho à casa torna</h1>\n        <p>Um estudo exploratório sobre regressos da Universidade Federal do Ceará</p>\n\n        <div>Sílvio Roberto Martins Amarante</div>\n        <div>Paulo Mateus Moura da Silva</div>\n        </div>\n      </header>\n\n      <section className=\"content\">\n        <h2>Regresso</h2>\n\n        <p>Quem voltou para a universidade, possui dois vínculos</p>\n        <div id=\"discente-info\">\n          <div className=\"discente-info-item\">\n            <div><AiOutlineUser className=\"icon\" /></div>\n            Origem\n          </div>\n          <div className=\"discente-info-item arrow\">\n            <AiOutlineArrowRight className=\"icon\" />\n          </div>\n          <div className=\"discente-info-item\">\n            <div><AiOutlineUser className=\"icon\" /></div>\n            Destino\n          </div>\n        </div>\n\n        <ul>\n          <li>Fez graduação depois pós;</li>\n          <li>Limpou o histórico;</li>\n          <li>Terminou ou não um curso e resolvou fazer outro;</li>\n          <li>etc...</li>\n        </ul>\n\n      {/*\n        <p>Casos não mapeados</p>\n        <ol>\n          <li>Trancamento;</li>\n          <li>Matrícula institucional;</li>\n          <li>Perda e recuperação de vínculo;</li>\n          <li>Vínculos com projetos de extensão.</li>\n        </ol>\n\n        <h2>Observação</h2>\n        <p>Base de dados similar a utilizada pela Universidade Federal do Ceará para gestão acadêmica, com as seguintes ressalvas:</p>\n        <ol>\n          <li><strong>Anonimato:</strong> sem identificação de pessoa ou de qualquer dado pessoal;</li>\n          <li><strong>Defasagem:</strong> dados não correspondem necessariamente ao estado atual da instituição;</li>\n          <li><strong>Base Ruidosa:</strong> testes realizados sobre a base podem inserir ruídos;</li>\n          <li><strong>Mascaramento:</strong> informações sensíveis ausentes/ocultas/mascaradas.</li>\n        </ol>\n      */}\n      </section>\n\n      {/*\n      <section>\n        <MapaUFC></MapaUFC>\n      </section>\n      */}\n\n      <section className=\"content\">\n        <h2>Graduação: Regressos por centros</h2>\n        <p>Gráfico de migração de entre centros. Cor da aresta refere-se a origem.</p>\n        <MigrationFlow></MigrationFlow>\n\n        <div>\n          <ul>\n            <li>Na Faculdade de Medicina, a cada 2 pessoas que saem, 8 voltam;</li>\n            <li>No Centro de Ciências Agrárias, a cada 7 que saem 8 voltam;</li>\n          </ul>\n        </div>\n\n        <Destinos />\n      </section>\n\n      <section>\n        <h2>Forma de ingresso</h2>\n        GRáfico do silvio 1\n\n        GRáfico do silvio 2\n        {/* \n        <p>\n          Até o ano de 20xx, o ingresso à Universidade Federal do Ceará era realizado por meio do vestibular. \n          A partir do ano 20xx, a instituição aderiu ao SISU como forma de ingresso.\n        </p>\n\n        <p>P1: Qual a forma de ingresso utilizada pelo discente para voltar a estudar na UFC? (Mudança de curso pelo ENEM, transferência externa, pós graduação etc)</p>\n\n        <p>P2: Qual a principal processo escolhido pelos discentes para mudarem de curso?</p>\n        RESPOSTA: (Enem/vestibular ou seleção interna)\n\n        <p>P3: Qual a principal processo escolhido pelos discentes para entrar em outro curso após concluir o anterior?</p>\n        RESPOSTA: (Reingresso como graduado ou Enem/vestibular)\n        */}\n      </section>\n\n      <section>\n        <h2>Regressos por nível</h2>\n        <SankeyNivel />\n      </section>\n\n      <section>\n        <h2>Qual a motivação de voltar para a instituição?</h2>\n      </section>\n\n      {/* <section>\n        <h2>Fatos divertidos</h2>\n        <p>P10: Há quem tenha terminado duas vezes o mesmo curso?</p>\n        <p>P11: Existe algum médico também advogado?</p>\n        RESPOSTA\n      </section> */}\n      <section>\n        <h2>Obrigado!</h2>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}